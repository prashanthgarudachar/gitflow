#===================================================================================================
#Bhargavs NTU project to use only python basics Data-struture & CSV Object to read / write to CSV
#==================================================================================================
import csv
import math
from datetime import datetime 

# ================================================
# Function to read csv data
# ---------------------  Actual read operation of the csv starts here ---------------------  
# ================================================
# Exclude the header & retain in a different list
csv_header = []
def return_csv_data(file_name):
    # ================================================
    #This created Dictionary with student id as Key
    # ================================================
    with open(file_name, newline='') as f:
        reader = csv.reader(f)
        headings = next(reader)
        data = list(reader)
    return data

def write_list_to_csv(list_obj):
    success_msg = ''
    csv_file_name = generate_unique_file_id() + '.csv'
    try:
        with open(csv_file_name, 'w') as wcsv:   
            #configure writer to write standard csv file
            					
            writer = csv.writer(wcsv, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL, lineterminator='\n')
            writer.writerow(['Tutorial Group', 'Student ID', 'School', 'Name', 'Gender', 'CGPA','Team Assigned'])
            for lst_item in list_obj:
                writer.writerow([lst_item[0], lst_item[1], lst_item[2], lst_item[3], lst_item[4], lst_item[5], lst_item[6]])
    except Exception as ex:
        success_msg = str(ex)
        print(' Data saved to file --> ' + csv_file_name)
    return success_msg
        
def write_to_file(dict_obj):
    success_msg = ''
    csv_file_name = generate_unique_file_id() + '.csv'
    try:
        with open(csv_file_name,'w') as f:
            w = csv.writer(f)
            for key, value in dict_obj.items():
                print(key)
                print(value)
                sub_dict = {}
                sub_dict = value
                #for sub_key in sub_dict.items:
                w.writerows(sub_dict)
    except Exception as ex:
        success_msg = str(ex)
        print(' Data saved to file --> ' + csv_file_name)
    return success_msg

def generate_unique_file_id():
    file_name_id = ''
    file_name_id = datetime.now().strftime('%Y%m-%d%H-%M%S-') #+ str(uuid4())
    return file_name_id

#===========================================================================
# Convert the string key field column (Tutorial Group) & return to help sort
#===========================================================================
def func_return_item_to_sort(item):
    return int(item[0])

#===========================================================================
# string key field column (Gender) 
#===========================================================================
def func_return_gender_item_to_sort(item):
    return (item[4])

#===========================================================================
# string key field column (CGPA) 
#===========================================================================
def func_return_cgpa_item_to_sort(item):
    return (float(item[-1]))

#================================================
# Return Datadictrionary from list Grouped by Key
#================================================
def return_grouped_dictionary_from_list_object(list_obj):
    tmp_data_dict = {}
    for items in list_obj:
        key = items[0][0]
        #items.append(str(items[0]) + '_' + str(items[1]) + '_' + str(items[4]) + '_' + str(round(float(items[5]))))
        if key not in tmp_data_dict:
            tmp_data_dict[key] = items
            print(' ============================== key ============================== ')
            print(key)
            print(items)
#             tmp_data_dict[key].add(items)
        else:
            test = '1'
            tmp_data_dict[key].append(items)
            tmp_data_dict[key].append(['grouped_column_value', str(items[0]) + '_' + str(items[1]) + '_' + str(items[4]) + '_' + str(round(float(items[5])))])
            #tmp_data_dict.update({'grouped_column_value' : str(items[0]) + '_' + str(items[1]) + '_' + str(items[4]) + '_' + str(items[5])})
            
        #print(tmp_data_dict['grouped_column_value'])
    return tmp_data_dict;

#================================================
def get_average_of_list(list_obj):
    starti=1
    total=0
    list_len=len(list_obj)
    while starti < list_len:
        total = total + float(list_obj[starti][-1])
        starti = starti +1
    return (total / list_len)

#=========================== Bhargav to test this from his jupyter notebook locally on his laptop ========================
#check for all the packages are installed - since Project TL doesnt allow to go for any advanced topic like
#Panda / Dataframe etc.... Stick to Dat-structures only 
#play around with the List / Dictionary objects / use CSV object to open / write to CSV file as this is built is package
#and doesnt need any installation
#==========================================================================================================================
# Call for the Functions from here
# Check for all the comments & add any comments where missing as mentioned by NTU TL
#==========================================================================================================================


#================================================
# Read student file to a Dict Object
#================================================
total_student_rows=0
no_of_students_in_group = 5
total_groups = 0
master_students_data = []
master_students_data = return_csv_data("./records.csv")
total_student_rows = len(master_students_data)
total_groups = int(total_student_rows / no_of_students_in_group)
# print(total_student_rows)
# print(total_groups)
# print('total_student_rows')
# print(total_student_rows)

#===============================================
# Sort List by column by Gender from Dict To List
#===============================================
sorted_master_students_data_list = []
sorted_master_students_data_list = sorted(master_students_data, key=func_return_gender_item_to_sort)
# print(sorted_master_students_data_list)
#====================
# Check the data-type
#====================
#print(type(sorted_master_students_data_list))
#===============================================

#===============================================
# - Split Male & FeMale List 
# - Sort on the column - CGPA 
# - Loop thru both the list to equally divide 
#   based on 
# total_student_rows = len(master_students_data) ==> 6000
# Total rows in the Student file Divided by no of Student Groups to be created which is
# no_of_students_in_group=5
# ===> total_groups = int(total_student_rows / no_of_students_in_group)
# total_groups=1200 (from the above calculation)
#===============================================
no_of_students_in_group = 5
total_student_rows = len(master_students_data)
total_groups = int(total_student_rows / no_of_students_in_group)
# print(total_student_rows)

#===============================================
# Gender Index in the list is 4
#===============================================
gender_col_index=4
#===============================================
# Split Male / FeMale in 2 different list Objects
#===============================================
gender_val_to_split = ('Male')
Male_list = [gen_list for gen_list in sorted_master_students_data_list if gen_list[gender_col_index] in gender_val_to_split]
Female_list = [gen_list for gen_list in sorted_master_students_data_list if gen_list[gender_col_index] not in gender_val_to_split]
#===============================================
#Sort Gender List based on CGPA
#===============================================

Male_list = sorted(Male_list, key=func_return_cgpa_item_to_sort)
Female_list = sorted(Female_list, key=func_return_cgpa_item_to_sort)
#===============================================

# print(' -------------------- All Fe-Male Sorted list-------------------- ')
# for g_val in Female_list:
#      print(g_val)
# print(' -------------------- All Male Sorted list -------------------- ')
# for g_val in Male_list:
#      print(g_val)

#=============================================== Debug values =====================================
# print(' -------------------- Length Of Male Sorted list -------------------- ')
# print(len(Male_list))
# print(' -------------------- Length Of Fe-Male Sorted list -------------------- ')
# print(len(Female_list))
# loop_till_half = (math.ceil(len(Female_list)/2))
# print(' loop_till_half')
# print(loop_till_half)
# print(assign_group)
# print(' starti')
# print(starti)
# print(len(Female_list))
# # start from the reverse order & assign the Group sequentially without skipping
#=============================================== Debug values end =================================

#===============================================
# Actual loop to go thru the Female / Make list starts here
# where-in a new Column is created in the line --> Female_list[starti].append(assign_group)
# that holds the Assigned Group (Number generated in sequence)
# the loop goes till total_groups times (1200)
# Since total_student_rows is 6000 -- total_groups is 1200 (Calculated earlier --> total_student_rows / no_of_students_in_group)
# Ones i is divible by 1200 then assign_group is re-initialized to assign the next Student in the loop to the Group
#===============================================

assign_group=1
# starti = len(Female_list)-1
starti = 0
i=1
while i < total_student_rows:
    Female_list[starti].append(assign_group)
    assign_group = assign_group + 1
    starti = starti + 1
    if ((i % total_groups) == 0):
        assign_group=1
    if (i == len(Female_list)):
        break
    i=i+1

#===============================================
# Sort the Female_list
#===============================================
Female_list = sorted(Female_list, key=func_return_cgpa_item_to_sort)
# for i in range(1,len(Female_list)):
#     print(Female_list[i])    

# assign_group has to start from where Female_list had ended to evenly distribute the groups 
# #----------------##----------------##----------------##----------------##----------------#
# print(' assign_groupassign_groupassign_groupassign_groupassign_group')
# print(assign_group)
starti = len(Male_list)-1
while i < total_student_rows:
    Male_list[starti].append(assign_group)
    assign_group = assign_group + 1
    starti = starti - 1
    if ((i % total_groups) == 0):
        assign_group=1
    if (i == len(Male_list)):
        break
    i=i+1
#===============================================
# Sort the Male_list
#===============================================
   
Male_list = sorted(Male_list, key=func_return_cgpa_item_to_sort)
# for i in range(1,len(Male_list)):
#     print(Male_list[i])    

#===============================================
# Now post List Group produced in Female / Male list
# update the Master List(master_students_data) with the Group No. assigned 
# based on the Student-ID
#=============================================== 
starti = 0
i=0
while i < len(Male_list)-1:
    if Male_list[starti][0] == master_students_data[0]:
        print('come')
        master_students_data[starti].append(Male_list[starti][-1])
    i = i + 1
starti = 0
i=0
while i < len(Female_list)-1:
    if Female_list[starti][1] == master_students_data[1]:
        master_students_data[starti].append(Female_list[starti][-1])
    i = i + 1
#==============================
# master_students_data = sorted(master_students_data, key=func_return_cgpa_item_to_sort)
# for value in master_students_data:
#     print(value)

print(' ----------------------- After  sortttttttttttt ----------------------- ')
for g_val in master_students_data:
   print(g_val)

#============================== Save to file ==============================
# master_students_data_dict = return_grouped_dictionary_from_list_object(master_students_data)
# consolidate_dict = dict()
# # for l2 in master_students_data:
# #     res[l2[0]] = l2[1:]
# #     print(l2[1:])
# print(type(res))
# success_flag = write_to_file(dict)
print('success_flag')
success_flag = write_list_to_csv(master_students_data)
print(success_flag)


